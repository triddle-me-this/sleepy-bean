package core.gameObjects.entities.activeEntities;

import java.awt.Color;
import java.util.HashMap;

import Shooter.Main;
import Shooter.weapons.BigPistol;
import Shooter.weapons.Weapon;
import core.animation.Animation;
import core.animation.AnimationFactory;
import core.console.Console;
import core.physics.Point;
import core.physics.Vector;
import graphics.AdvancedGraphics;

public class Player extends ActiveEntity{

	final static double MAX_MOVE_SPEED = 2.0;
	
	HashMap<String, Animation> torsoAnimations;
	HashMap<String, Animation> legAnimations;
	
	Animation torsoAnimation;
	Animation legsAnimation;
	
	boolean legsRight;
	boolean legsUp;
	
	Weapon currentWeapon;

	
	public Player(int x, int y, int width, int height) {
		super(x, y, width, height);
		
		torsoAnimations = new HashMap<String, Animation>();
		legAnimations = new HashMap<String, Animation>();
		
		loadTorsoAnimations();
		loadLegAnimations();
		
		torsoAnimation = torsoAnimations.get("frontIdle");
		legsAnimation = torsoAnimations.get("frontIdle");
		
		legsRight = true;
		legsUp = true;
		
		currentWeapon = new BigPistol(location.getIntX(), location.getIntY(), Console.getImage("weapons/", "spr_bigPistol.png"));
		
	}
	
	public void loadTorsoAnimations(){
		
		Animation frontRun = AnimationFactory.createAnimation(Console.getImage("player/torso/", "torso_frontRun.png"), 13, 24, 5, true);
		torsoAnimations.put("frontRun", frontRun);
		
		Animation backRun = AnimationFactory.createAnimation(Console.getImage("player/torso/", "torso_backRun.png"), 13, 24, 5, true);
		torsoAnimations.put("backRun", backRun);
		
		Animation idle = AnimationFactory.createAnimation(Console.getImage("player/torso/", "torso_frontIdle.png"), 9, 24, 1, false);
		torsoAnimations.put("frontIdle", idle);
		
		Animation backIdle = AnimationFactory.createAnimation(Console.getImage("player/torso/", "torso_backIdle.png"), 11, 24, 1, false);
		torsoAnimations.put("backIdle", backIdle);
	}
	
	public void loadLegAnimations(){
		
		Animation frontRun = AnimationFactory.createAnimation(Console.getImage("player/legs/", "legs_frontRun.png"), 13, 24, 5, true);
		legAnimations.put("frontRun", frontRun);
		
		Animation backRun = AnimationFactory.createAnimation(Console.getImage("player/legs/", "legs_backRun.png"), 13, 24, 5, true);
		legAnimations.put("backRun", backRun);
		
		Animation idle = AnimationFactory.createAnimation(Console.getImage("player/legs/", "legs_frontIdle.png"), 9, 24, 1, false);
		legAnimations.put("frontIdle", idle);
		
		Animation backIdle = AnimationFactory.createAnimation(Console.getImage("player/legs/", "legs_backIdle.png"), 11, 24, 1, false);
		legAnimations.put("backIdle", backIdle);
	}
		
	@Override
	public void update() {
		
		boolean upPress = Console.isKeyPressed('w');
		boolean leftPress = Console.isKeyPressed('a');
		boolean downPress = Console.isKeyPressed('s');
		boolean rightPress = Console.isKeyPressed('d');
		
		velocity = new Vector(0,0);
		
		if (upPress && !downPress){
			legsUp = true;
			velocity.addY(-1);
			
		}
		if (leftPress && !rightPress){
			legsRight = false;
			velocity.addX(-1);
		}
		if (downPress && !upPress){
			legsRight = false;
			velocity.addY(1);
		}
		if (rightPress && !leftPress){
			legsRight = true;	
			velocity.addX(1);
		}
		
		velocity.setLength(MAX_MOVE_SPEED);
		location.move(velocity);
		
		//Animation 
		String LA;
		String TA;
		
		Point mouse = Console.getMousePositionInGamePanel();
		int mX = mouse.getIntX()/Main.SCALE;
		int mY = mouse.getIntY()/Main.SCALE;
		
		if (velocity.getLength()>0.0){
			//legs
			if (legsUp){
				LA = "backRun";
			}
			else{
				LA = "frontRun";
			}
			//torso
			if (mY < getCenterLocation().getIntY()){
				TA = "backRun";
			}
			else{
				TA = "frontRun";
			}
		}
		else{
			//legs
			if (legsUp){
				LA = "backIdle";
			}
			else
				LA = "frontIdle";
			
			//torso
			if (mY < getCenterLocation().getIntY()){
				TA = "backIdle";
			}
			else{
				TA = "frontIdle";
			}
		}
		
		 legsAnimation = legAnimations.get(LA);
		 torsoAnimation = torsoAnimations.get(TA);
		
		legsAnimation.update();
		torsoAnimation.update();
		
		//weapon
		currentWeapon.update(getCenterLocation());
		
	}

	@Override
	public void draw(AdvancedGraphics pen) {
		pen.setColor(Color.BLUE);
		pen.drawRect(location.getIntX(), location.getIntY(), width, height);
		
		Point alLoc = getAlignedLocation();
		
		//determine draw order. -------------------
		Point mouse = Console.getMousePositionInGamePanel();
		int x = mouse.getIntX()/Main.SCALE;
		int y = mouse.getIntY()/Main.SCALE;
		
		boolean torsoRight;
		if (x >= getCenterLocation().getIntX()){
			torsoRight = true;
		}
		else{
			torsoRight = false;
		}
		
		if (y < getCenterLocation().getIntY()){
			currentWeapon.draw(pen);
			legsAnimation.draw(pen, alLoc.getIntX(), alLoc.getIntY(), !legsRight, false);
			torsoAnimation.draw(pen, alLoc.getIntX(), alLoc.getIntY(), !torsoRight, false);
		}
		else{
			legsAnimation.draw(pen, alLoc.getIntX(), alLoc.getIntY(), !legsRight, false);
			currentWeapon.draw(pen);
			torsoAnimation.draw(pen, alLoc.getIntX(), alLoc.getIntY(), !torsoRight, false);
			
		}
		
			
		
		//
		
	}
	
	public Point getAlignedLocation(){
		int aWidth = torsoAnimation.getCurrentFrame().getWidth();
		int aHeight = torsoAnimation.getCurrentFrame().getHeight();

		int xOffset = (width - aWidth)/2;
		int yOffset = (height - aHeight)-1;
		
/*		xOffset +=1
		
		Point aligned = new Point(location.getIntX() + xOffset, location.getIntY() + yOffset);
		return aligned;
	}

}
